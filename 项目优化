1.项目上线之后应该取消外键。对于数据的一致性依赖不高，外键会导致数据库消耗资源去维护，增删改操作后也要触发操作去检查。外键请求的时候，可能要对其他表加锁，出现死锁的情况。
2.改善联表查询的效率：在被驱动的表上建立索引，可以在数据量大的时候改善查询速度。
3.数据量大的时候，可以先用where语句快速定位到要查的id附近，防止全表扫描：比如where id>10000。
4.用between或者In也可以改善查询速度。如果知道要取出的数据只有一条，可以用Limit 1。
5.为经常查询的字段建立索引。对字符串，Like Mysql%可以改成between Mysql and Mysqm。
6.如果GROUP BY,DISTINCT,ORDER BY 的列没有索引,产生临时表. 要避免产生临时表。
7.对数据库的优化：
-优化sql和索引；
-加缓存，redis;
-试试Mysql自带分区表；
-垂直拆分；
-水平拆分。
成本由低到高。
myisam读的效率高，写的效率差，每次写的优先级很高，直接会在读之前锁表。
innodb的行锁一般加到索引上，如果sql没有用到索引，依然会锁定表。读的是快照。与写不冲突。
8.选择合适的引擎，公司的业务以插入和修改为主，所以应该选择innodb作为Mysql引擎。

安全问题：
1.我加了登录过滤器，首先过滤掉未登录的人；
2.加了权限过滤器，如果用户没有权限不能访问；
3.可能考虑隐藏url，防止直接访问内部方法，关键数据不能出现在URL中；
4.多重MD5加密；
5.不要把异常信息直接抛到页面上，可能被利用；
6.合法用户注销后，可以通过后退按钮逃过filter的过滤：对关键页面取消缓存。
7.防止SQL注入，不用+拼接SQL语句；
8.文件上传：前后台都要过滤，类型，大小等；
9.对用户提交的数据转义后提交，防止Js漏洞。
10.记录日志，记录来访者的IP，传递参数等信息，防止危险；

对代码的优化：
1.对String的链接，修改等操作改用StringBuffer进行，因为String是不可变类，对其修改要创建额外的对象，消耗额外的空间。
2.提高对象重用和代码复用率，现在代码重复率太高，要把重复代码块抽取出来。
3.对象创建尽量用懒加载，现在经常会在If函数体之外创建一些If内用到的对象，这是不好的习惯。
4.循环内不要创建对象引用。for (int i = 1; i <= count; i++) 
 
{ 
 
Object obj = new Object(); 
 
}类似于这种，会导致过多的Obj在内存中，可以事先创建一个obj再引用。 
5.及时清除不再需要的session，调用invalidate()方法，因为对session钝化的代价很昂贵。
6.随机访问for循环效率高，顺序访问foreach效率高，因为foreach用的是迭代器。

WEB应用提高性能：
1.ngix反向代理，负载均衡。
2.缓存静态页面。
3.数据压缩。
